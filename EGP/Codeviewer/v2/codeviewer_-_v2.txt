@name Codeviewer - V2

# [ --- Config --- ] #
@persist CVConfig:table Name:string

# [ --- Globals --- ] #
@persist PrevLine PrevX LastLineNumbersWidth LastLineIndex LastToggle
@persist [Mode PrevMode CurrentFile FileContents]:string
@persist EGP:wirelink
@persist [E User]:entity
@persist [E2Events E2Data]:table
@persist [Cursor PrevTextPos]:vector2

# [ --- File Loader --- ] #
@persist FileLoading 

# [ --- Parser & Combiner --- ] #
@persist E2Parsed E2Combined 

# [ --- Visualizer --- ] #
@persist VLoading VLineCounter VDone TextStartingIndex
@persist [PreprocText CommentsText StringsText KeywordsText VariablesText TypesText NumbersText UserFunctionsText FunctionsText EnumsText PPCommandsText DefaultText TabSpaceText ErrorText]:string

# [ --- File Browser --- ] #
@persist FileListing Files:array BrowserActive SavedCursor:vector2 Page Up2Date BrowserItemsStartIndex FilePath:string

#@model models/hunter/blocks/cube05x05x05.mdl

#[
    This code was written by Sixmax (STEAM_0:0:104139026).
    
    You may use this in your projects but not claim it as yours (Check License: https://github.com/Sixmax/gmod/blob/master/license.txt)
    Abuse may cause an inconvenience on your and my side. So please respect my work and follow the licensing.
]#

interval(60)

AimEnt = User:aimEntity()

if(first())
{   
    Name = "Codeviewer - V2.5"
    
    E = entity()
    
    setName(Name)
    
    runOnChat(1)
    runOnLast(1)
    runOnFile(1)
    
    # [ --- To Do --- ] #
    #[
        - Beim Scrollen fehlende Teile laden, anstatt alles. (Zurzeit wird alles neu geladen, das, wenn moeglich, vermeiden) ---> addLineToContext(n) & removeLineFromContext(n)
        - Whitelist hinzufuegen
        - Unten rechts Text platzieren, mit dem filenamen als text
    ]#
    
    
    # [ --- Config --- ] #    
    User = owner()
        
    CVConfig = table(
        "chatprefix" = "/",
        "debug"      = 1,
        "curline"    = 1,
        
        "font"       = "Consolas",
        "fontsize"   = 12,
        
        "colors" = table(
            "background" = vec(40,40,45),
            "sbbg"       = vec(30,30,35),
            "linenums"   = vec(90,90,95),    
                
            "progressbar" = vec(22,221,35),
                
            "objectbg"    = vec(50,50,55),
            "objectbg2"   = vec(60,60,65),
            "objectol"    = vec(80,80,85),
                
            "folder"      = vec(229,214,6),
            "file"        = vec(118,139,193),
                
            "listitembg"  = vec(60,60,65),
                
            "preproc"      = vec(240,240,160),
            "variable"     = vec(160, 240, 160),            
            "comment"      = vec(128),
            "string"       = vec(150,150,150),
            "enum"         = vec(240,160,240),
            "type"         = vec(240,160,96),
            "keyword"      = vec(160,240,240),
            "number"       = vec(247,167,167),            
            "function"     = vec(160,160,240),
            "ppcommand"    = vec(240,96,240),
            "userfunction" = vec(102,122,102),
            "unknown"      = vec(255),
            
            "tabspc"       = vec(75),
            "error"        = vec(241,96,96)
        ),
        
        "sounds" = table(
            "success" = "buttons/button9.wav",
            "failure" = "buttons/button8.wav",
            "warning" = "buttons/button4.wav",
            
            "click"   = "buttons/button16.wav",
            "error"   = "buttons/button10.wav"
        )
    )

    BrowserItemsStartIndex = 15
    TextStartingIndex = 100
        
    # [ --- Misc --- ] #
   # #include "libraries/e2parser"
   
    #include "libraries/e2parser_v2"

    function void playSound(Sound:string)
    {
        EGP:entity():soundPlay(randint(1,255), 1, CVConfig["sounds", table][Sound, string])   
    }

    function void setUser(NewUser:entity)
    {
        User   = NewUser
        Cursor = EGP:egpCursor(NewUser)       
    }

    function vector col(ID:string)
    {
        return CVConfig["colors", table][ID, vector]   
    }

    function void setMode(NewMode:string)
    {
        PrevMode = Mode
        Mode = NewMode   
    }    
   
    setMode("init")

    function string onArgsChat(Command:string)
    {
        if(chatClk(owner()))
        {
            local Cmd = CVConfig["chatprefix", string] + Command
                 
            local Said = owner():lastSaid()
            
            if(Said:sub(1, Cmd:length()) == Cmd)
            {
                hideChat(1)
                
                return Said:sub(Cmd:length() + 2, Said:length())
            }
        }
        
        return ""
    }  
    
    function number onChat(Command:string)
    {
        if(chatClk(owner()))
        {
            local Cmd = CVConfig["chatprefix", string] + Command
            
            local Said = owner():lastSaid()
            
            if(Said:sub(1, Cmd:length()) == Cmd)
            {
                hideChat(1)
                
                return 1   
            }    
        }
        
        return 0   
    }
   
    function string loadFile(Path:string)
    {
        if(!FileLoading)
        {
            if(fileCanLoad())
            {
                fileLoad(Path)   
                FileLoading = 1
            }
        }
        else
        {
            if(fileClk() & !fileLoading())
            {
                FileLoading = 0
                
                if(fileStatus() == _FILE_OK)
                { 
                    return fileRead()
                }   
                else
                {              
                    return "error"
                }
            } 
        }
        
        return ""
    }

    function number hovering(Element)
    {
        return inrange(Cursor, EGP:egpPos(Element) - EGP:egpSize(Element), EGP:egpPos(Element) + EGP:egpSize(Element))     
    }

    function number clicked(Element)
    {
        if(hovering(Element) & changed(User:keyPressed("E")) & User:keyPressed("E"))
        {       
            return 1    
        }
        
        return 0        
    }
    
    function void centralize(Element)
    {
        EGP:egpPos(Element, vec2(256, 256))
    }
    
    function void centralize(Element, Offset:vector2)
    {
        EGP:egpPos(Element, vec2(256, 256) + Offset)
    }    
    
    function number clicked(Key:string)
    {
        return AimEnt == EGP:entity() & User:keyPressed(Key)   
    }

    function number number:mSub(Str)
    {
        local X = round(This)
        
        if(X % Str)
        {
            return X + Str - (X % Str)   
        }
        
        return X
    }

    function void pOut(Color:vector, Code:string, Message:string, Sound:string)
    {
        if(CVConfig["debug", number])
        {
            printColor(vec(0), ">> [", Color, Code, vec(0), "] ", vec(255), Message)    
        }  
        
        entity():soundPlay(hash(Code + Message), 2, Sound)      
    }

    function void errOut(Code:string)
    {
        pOut(vec(255,0,0), "Error", Code, "buttons/button8.wav") 
    }

    function void sucOut(Code:string)
    {
        pOut(vec(0,255,0), "Success", Code, "buttons/button9.wav")         
    }

    function void warOut(Code:string)
    {
        pOut(vec(255,255,0), "Warning", Code, "buttons/button4.wav")    
    }

    function string encodeFilename(Input:string)
    {
        local Result = Input
        foreach(I, Reserved:string = array("<", ">", ":", "\"", "/", "\\", "|", "?", "*", " "))
        {
            Result = Result:replace(Reserved, "_")   
        }  
        return Result
    }

    function void addSyntax(Index, Text:string, Color:vector)
    {
        local I = TextStartingIndex + Index
        
        if(!EGP:egpHasObject(I))
        {
            EGP:egpTextLayout(I, Text, vec2(0,0), vec2(9999, 9999)) 
            EGP:egpParent(I, 1)        
        }   
        else
        {
            EGP:egpSetText(I, Text)    
        }
         
        EGP:egpColor(I,  Color)
        EGP:egpSize(I,   CVConfig["fontsize", number])
        EGP:egpFont(I,   CVConfig["font", string])                                           
    }

    function void setTextX(N)
    {
        EGP:egpPos(1, vec2(N, 0))
    }

    function void setSidebar(Width)
    {
        local PrevPos = EGP:egpPos(1)     
         
      #  EGP:egpPos(1,  vec2(Width + 2.5, 0))        
        EGP:egpPos(3,  vec2(Width / 2, 256))
        EGP:egpSize(3, vec2(Width, 512))       
        EGP:egpPos(4,  vec2(Width, 256))      
        
        LastLineNumbersWidth = Width
    }

    function void toggleSidebar(Toggle)
    {
        if(Toggle == LastToggle)
        {
            return 
        }
        
        if(!Toggle)
        {
            EGP:egpAlpha(3, 0)
            EGP:egpAlpha(4, 0)
            EGP:egpAlpha(5, 0)
        } 
        else
        {  
            EGP:egpAlpha(3, 255)
            EGP:egpAlpha(4, 255)
            EGP:egpAlpha(5, 255)
        }
        
        LastToggle = Toggle        
    }
    
    function void toggleProgressBar(Toggle, Progress)
    {
        local Al = 255 * Toggle
        EGP:egpAlpha(6, Al)
        EGP:egpAlpha(7, Al)
        EGP:egpAlpha(8, Al)
        
        local PTOS = (256 / 100) * Progress
        
        EGP:egpPos(7,  vec2(PTOS, 507))
        EGP:egpSize(7, vec2(PTOS * 2, 8))
    }
    
    function void toggleBrowser(Toggle)
    {
        local Status = Toggle * 255
        
        EGP:egpAlpha(12, Status)
        EGP:egpAlpha(13, Status)
        EGP:egpAlpha(14, Status)     
    
        EGP:egpAlpha(49, Status)
        EGP:egpAlpha(50, Status)  
        EGP:egpAlpha(51, Status)
        
        EGP:egpAlpha(52, Status)
        EGP:egpAlpha(53, Status)
        EGP:egpAlpha(54, Status)
    
        BrowserActive = Toggle
        
        if(!BrowserActive)
        {
            for(I = BrowserItemsStartIndex, BrowserItemsStartIndex + 10 * 3, 3)
            {
                EGP:egpAlpha(I, 0)   
                EGP:egpAlpha(I + 1, 0)  
                EGP:egpAlpha(I + 2, 0)   
            }      
            
            EGP:egpMaterial(11, "materials/icon16/folder.png") 
        }
        else
        {
            EGP:egpMaterial(11, "materials/icon32/folder.png")       

            local VisiblePath = ">e2shared/" + FilePath
                
            if(VisiblePath:length() > 32)
            {
                VisiblePath = "..." + VisiblePath:sub(VisiblePath:length() - 29, VisiblePath:length())    
            }
            
            EGP:egpSetText(54, VisiblePath)
        }
        
        Page = 0   
        Up2Date = 0   
    }
    
    function void setLineNumbers(Start)
    {
        local Count = ceil(512 / CVConfig["fontsize", number])
        
        local Text = ""
        
        for(I = Start, min(Start + Count, E2Data:count()))
        {
            Text += I + "\n"   
        }        
        
        EGP:egpSetText(5, Text)
        EGP:egpFont(5,    CVConfig["font", string])
        EGP:egpSize(5,    CVConfig["fontsize", number])
        
        local Length = (Start + Count):toString():length()
        setSidebar(Length * CVConfig["fontsize", number] - (CVConfig["fontsize", number]/1.95) * (Length - 1))
    }

    function void resetText()
    {
        for(I = 1, 14)
        {
            addSyntax(I, "", vec(255))                               
        }
        LastLineNumbersWidth = 0 #CVConfig["fontsize", number]
        setTextX(0)
    }

    # [ ---  Modes --- ] #
    function void dump()
    {
        E2Parsing = E2Combining = VLoading = VLineCounter = E2Combined = E2Parsed = PrevX = LastLineIndex = 0
        VDone = PrevLine = 1 
        
        FileContents = CurrentFile = ""
        
        CVConfig["curline", number] = 1
        
        PrevTextPos = vec2()
        
        E2Data = E2Events = table()
        
        toggleSidebar(0)
        
        resetText()  
        
        resetE2()
    }

    function void visualizeFile(Path:string)
    {
        dump()
        CurrentFile = ">e2shared/" + FilePath + Path + ".txt"  
        setMode("openFile")        
    }
 
    function void init()
    {
        local Parent = E:isWeldedTo()
        
        if(Parent:type() == "gmod_wire_egp")
        {
            EGP = Parent:wirelink()        
        }
        else
        {
            error("Not placed on EGP-Screen")   
        }
        
        EGP:egpClear()  
 
        # Syntax Text super      
        EGP:egpCircle(1, vec2(), vec2(25))
        EGP:egpAlpha(1, 255)
             
        # Screen Background
        EGP:egpBox(2, vec2(256,256), vec2(512, 512))
        EGP:egpColor(2, col("background"))
 
        dump() 
               
        # Line Numbers background  
        EGP:egpBox(3, vec2(10,256), vec2(20, 512))
        EGP:egpColor(3, col("sbbg"))

        # Line Numbers indicator corner
        EGP:egpBox(4, vec2(20,256), vec2(1, 512))
        EGP:egpColor(4, vec(80))
                       
        # Line Numbers 
        EGP:egpTextLayout(5, "", vec2(2.5,0), vec2(999))
        EGP:egpColor(5, col("linenums"))
        EGP:egpFont(5, CVConfig["font", string])
        EGP:egpSize(5, CVConfig["fontsize", number])
                            
        setLineNumbers(1)
        
        LastToggle = 1
        toggleSidebar(0)
              
        # Progressbar 
        EGP:egpBox(6, vec2(256,507), vec2(512,10))
        EGP:egpColor(6, col("sbbg"))
        
        EGP:egpBox(7, vec2(0,507), vec2(0,10))
        EGP:egpColor(7, col("progressbar"))
                        
        EGP:egpBoxOutline(8, vec2(256, 508), vec2(512, 10))
        EGP:egpColor(8, vec(80))  
                
        toggleProgressBar(0,0)
                
        # File Browser button
       # EGP:egpBox(9, vec2(512 - 35 / 2,40 / 2), vec2(35,35))
       # EGP:egpColor(9, col("buttonbg"))
        
       # EGP:egpBoxOutline(10, vec2(512 - 35 / 2,40 / 2), vec2(35, 35))
       # EGP:egpColor(10, vec(100))
        
        EGP:egpBox(11, vec2(512 - 32.5 / 2,40 / 2), vec2(25,25))
        EGP:egpMaterial(11, "materials/icon32/folder.png")
                
        EGP:egpBox(12, vec2(), vec2(360))
        centralize(12)
        EGP:egpColor(12, col("objectbg"))

        EGP:egpBoxOutline(13, vec2(), vec2(360))
        centralize(13)
        EGP:egpColor(13, col("objectol"))
            
        # Browser Items
        local C = 0
        for(I = BrowserItemsStartIndex, BrowserItemsStartIndex + 10 * 3, 3)
        {
            EGP:egpBox(I, vec2(), vec2(300, 20))  
            EGP:egpAlpha(I, 0)
            centralize(I, vec2(0,-125 + 28 * C))
            EGP:egpColor(I, col("listitembg"))
            
            EGP:egpText(I + 1, "", vec2(-145,-CVConfig["fontsize", number] * 0.5 - 2.5))
            EGP:egpFont(I + 1, CVConfig["font", string])
            EGP:egpParent(I + 1, I)
            EGP:egpAlpha(I + 1, 0)
            
            EGP:egpBoxOutline(I + 2, vec2(), vec2(300,20))
            EGP:egpParent(I + 2, I)
            EGP:egpColor(I + 2, col("objectol"))
            EGP:egpAlpha(I + 2, 0)
            
            C++
        }
        
        # Close Browser
        EGP:egpBox(14, vec2(), vec2(20,20))
        centralize(14, vec2(180, -180) - vec2(15, -15))
        EGP:egpMaterial(14, "materials/icon16/cross.png")
                  
        # Next Page        
        EGP:egpBox(49, vec2(), vec2(20,20))
        centralize(49, vec2(180, 180) - vec2(12.5, 17))
        EGP:egpMaterial(49, "materials/icon16/resultset_next.png")        

        # Previous Page 
        EGP:egpBox(50, vec2(), vec2(20,20))
        centralize(50, vec2(-180, 180) - vec2(-14.5, 17))
        EGP:egpMaterial(50, "materials/icon16/resultset_previous.png")        
                      
        # Last Directory
        EGP:egpBox(51, vec2(), vec2(20,20))
        centralize(51, vec2(-180, -180) + vec2(15, 15))
        EGP:egpMaterial(51, "materials/icon16/arrow_undo.png")        

        # Directory indicator
        EGP:egpBox(52, vec2(), vec2(280, 25))  
        centralize(52, vec2(0,-156))
        EGP:egpColor(52, col("objectbg2"))
        
        EGP:egpBoxOutline(53, vec2(), vec2(280, 25))  
        centralize(53, vec2(0,-156))
        EGP:egpColor(53, col("objectol"))
        
        EGP:egpText(54, "", vec2())
        EGP:egpFont(54, CVConfig["font", string])  
        EGP:egpColor(54, vec(150))
        centralize(54, vec2(-132.5,-165))  
                              
        toggleBrowser(0)        
        
        # Cancel Parsing Button & Label          
        EGP:egpBox(55, vec2(), vec2(30,30))
        centralize(55, vec2(0,20))
        EGP:egpMaterial(55, "materials/icon16/cancel.png")
        
        EGP:egpText(56, "Cancel Parsing?", vec2())
        centralize(56, vec2(-55,-20))
        EGP:egpColor(56, vec(150))
        
        EGP:egpAlpha(55,0)
        EGP:egpAlpha(56,0)
        
        setMode("idle")    
    }
 
    function void addLineToContext(Index)
    {            
        local Data = E2Data[Index, table]
            
        PreprocText       += Data["preproc",      string] + "\n"                       
        DefaultText       += Data["default",      string] + "\n"
        CommentsText      += Data["comment",      string] + "\n"
        StringsText       += Data["string",       string] + "\n"
        EnumsText         += Data["enum",         string] + "\n"
        TypesText         += Data["type",         string] + "\n"
        KeywordsText      += Data["keyword",      string] + "\n"
        NumbersText       += Data["number",       string] + "\n"
        FunctionsText     += Data["function",     string] + "\n"
        PPCommandsText    += Data["ppcommand",    string] + "\n"
        UserFunctionsText += Data["userfunction", string] + "\n"
        VariablesText     += Data["variable",     string] + "\n"
            
        ErrorText         += Data["error", string]  + "\n"
        TabSpaceText      += Data["tabspc", string] + "\n"                               
    }
    
    function string string:removeLine(I)
    {
        local Lines = This:explode("\n")
        Lines:remove(I)
        return Lines:concat("\n")   
    }
    
    function void removeLineFromContext(Index)
    {
        PreprocText       = PreprocText:removeLine(Index)
        DefaultText       = DefaultText:removeLine(Index)
        CommentsText      = CommentsText:removeLine(Index)
        StringsText       = StringsText:removeLine(Index)
        EnumsText         = EnumsText:removeLine(Index)
        TypesText         = TypesText:removeLine(Index)
        KeywordsText      = KeywordsText:removeLine(Index)
        NumbersText       = NumbersText:removeLine(Index)
        FunctionsText     = FunctionsText:removeLine(Index)
        PPCommandsText    = PPCommandsText:removeLine(Index)
        UserFunctionsText = UserFunctionsText:removeLine(Index)
        VariablesText     = VariablesText:removeLine(Index)
        
        ErrorText         = ErrorText:removeLine(Index)
        TabSpaceText      = TabSpaceText:removeLine(Index)
    }
   
    function void updateCursor()
    {
        PrevLine    = CVConfig["curline", number] + Cursor:y():mSub(CVConfig["fontsize", number]) / CVConfig["fontsize", number] - 1
        PrevX       = Cursor:x()
        PrevTextPos = EGP:egpPos(1)   
    }
    
    function void idle()
    {
        local Open = onArgsChat("open")
        local Line = onArgsChat("line")
        local Font = onArgsChat("font")
        
        local CodeActive = E2Data:count()
        
        if(Open)
        {
            visualizeFile(encodeFilename(Open))
        }        
        elseif(onChat("reset"))
        {
            setMode("init")   
        }        
        elseif(Line)
        {
            CVConfig["curline", number] = Line:toNumber()
            setMode("visualizeData")   
        }
        elseif(Font)
        {
            local NewFontsize = clamp(Font:toNumber(), 8, 48)
            CVConfig["fontsize", number] = NewFontsize
            if(CodeActive)
            {
                setMode("reloadVisualizedData") 
            }
        }
        elseif(onChat("clear"))
        {
            if(CodeActive)
            {
                dump()
            }                   
        }   
        elseif(onChat("reload"))
        {
            if(CodeActive)
            {
                setMode("reloadVisualizedData")  
            }               
        }
        elseif(CodeActive)
        {
            if(AimEnt == EGP:entity())
            {
                if(clicked("E"))
                {
                    local Selected = CVConfig["curline", number] + Cursor:y():mSub(CVConfig["fontsize", number]) / CVConfig["fontsize", number] - 1                
                    
                    local YDiff = PrevLine - Selected
                    local XDiff = ceil((PrevX - Cursor:x()) / CVConfig["fontsize", number])
                    
                    setTextX(min(PrevTextPos:x() - XDiff * CVConfig["fontsize", number], LastLineNumbersWidth))
                    
                    if(YDiff != 0 & CVConfig["curline", number] + YDiff > 0)
                    {
                        local Total = ceil(512 / CVConfig["fontsize", number])
                        
                        if(CVConfig["curline", number] + YDiff + Total - 2 < E2Data:count())
                        {
                            CVConfig["curline", number] = CVConfig["curline", number] + YDiff
                            setMode("visualizeData")  
                        }
                    }  
                }
                else
                {
                    updateCursor()   
                }      
            }                               
        }

        if(clicked(11))
        {
            playSound("click")
            setMode("openBrowser") 
        } 
    }
    
    function void openBrowser()
    {
        if(!FileListing)
        {
            if(fileCanList())
            {
                fileList(">e2shared/" + FilePath)
                FileListing = 1
            }
        }
        else
        {
            if(fileListClk() & !fileLoadingList())
            {
                FileListing = 0
                
                Files = array()                
                foreach(I, File:string = fileReadList())
                {
                    if(File:find(".txt"))
                    {
                        Files:pushString(File)   
                        continue
                    }

                    Files:insertString(1, File)                    
                }
                             
                toggleBrowser(1)
                
                setMode("showBrowser")
            }  
        }
    }
    
    function void showBrowser()
    {
        updateCursor()

        if(clicked(14))
        {       
            playSound("click")
            FileListing = 0
            Files = array()            
            toggleBrowser(0)   
            setMode("idle")
        }
        elseif(clicked(49))
        {            
            Page++
            if(Page >= ceil(Files:count() / 10))
            {
                Page--   
                playSound("error")
            }
            else
            {
                Up2Date = 0
                playSound("click")   
            } 
        }
        elseif(clicked(50))
        {
            Page--        
            if(Page < 0)
            {
                Page++   
                playSound("error")                   
            }
            else
            { 
                Up2Date = 0
                playSound("click")     
            }    
        }
        elseif(clicked(51))
        {
            if(FilePath == "")
            {
                playSound("error")
                return    
            }   
            
            local Directories = FilePath:explode("/")
            FilePath = FilePath:replace(Directories[Directories:count() - 1, string] + "/", "")

            playSound("click")

            setMode("openBrowser")
        }
        else
        {
            if(!Up2Date)
            {
                local C = 1 + 11 * Page 
                
                for(I = BrowserItemsStartIndex, BrowserItemsStartIndex + 10 * 3, 3)
                {
                    if(C > Files:count())
                    {
                        EGP:egpAlpha(I, 0)
                        EGP:egpAlpha(I + 1, 0)
                        EGP:egpAlpha(I + 2, 0)                        
                        continue    
                    }
                    
                    EGP:egpAlpha(I, 255)
                    EGP:egpAlpha(I + 1, 255)
                    EGP:egpAlpha(I + 2, 255)
                    
                    local Text = (C + ". " + Files[C, string])
                    
                    EGP:egpSetText(I + 1, Text:length() > 36 ? Text:sub(1, 33) + "..." : Text)
                    
                    if(Text:index(Text:length()) == "/")
                    {
                        EGP:egpColor(I + 1, col("folder"))      
                    }
                    else
                    {
                        EGP:egpColor(I + 1, col("file"))    
                    }
                    
                    C++
                }            
                
                Up2Date = 1   
            }
            else
            {
                local C = 1 + 11 * Page 
                
                for(I = BrowserItemsStartIndex, BrowserItemsStartIndex + 10 * 3, 3)
                {    
                    if(clicked(I))
                    {
                        local Text = Files[C, string]
                        
                        if(!Text)
                        {
                            break   
                        }
                        
                        if(Text:index(Text:length()) == "/")
                        {
                            Files = array()
                            FileListing = 0
                            FilePath += Text 
                            playSound("click")
                            setMode("openBrowser") 
                        }
                        else
                        {
                            visualizeFile(Text:replace(".txt", ""))
                            FileListing = 0
                            Files = array()            
                            toggleBrowser(0)   
                        }
                        
                        break
                    }     
                 
                    C++           
                }      
            }
        }         
    }
    
    function void openFile()
    {
        local Contents = loadFile(CurrentFile)
        switch(Contents)
        {
            default,    
                FileContents = Contents
                sucOut("File Loaded.")
                
                EGP:egpAlpha(55,255)
                EGP:egpAlpha(56,255)
                EGP:egpAlpha(11, 0)  
    
                setMode("parseContents")
            break   
        
            case "error",
                errOut("Failed to load: " + CurrentFile + ".")
                dump()
                setMode("idle")
            break
            
            case "",    
                # File is currently loading
            break
        }   
    }
    
    function void parseContents()
    {
        local Status = ""
        local Progress = 0
        
        if(!E2Parsed)
        {
            local Result = FileContents:parseE2(1,1)
            
            Status = "Parsing..."
            Progress = e2Progress()
            
            if(Result)
            {
                sucOut("E2 Parsed.")
                
                E2Data = Result

                setName(Name)
                
                toggleProgressBar(0,0)

                EGP:egpAlpha(55,0)
                EGP:egpAlpha(56,0)
                
                EGP:egpAlpha(11, 255) 
                
                toggleSidebar(1)     
                setLineNumbers(1) 
                
                EGP:egpPos(1,  vec2(LastLineNumbersWidth + 2.5, 0))      
                                 
                setMode("visualizeData")  
                
                return
            }               
        }

        if(clicked(55))
        {
            setName(Name)
            
            playSound("click")
            
            toggleProgressBar(0, 0)
            toggleSidebar(1)     
            setLineNumbers(1) 
            
            EGP:egpPos(1,  vec2(LastLineNumbersWidth + 2.5, 0))      
       
            EGP:egpAlpha(55,0)
            EGP:egpAlpha(56,0)
            EGP:egpAlpha(11, 255) 
            
            dump()
            
            setMode("idle")                                
        }
        
        if(floor(realtime(), 1) % 0.2 == 0)
        {
            toggleProgressBar(1, Progress)
            setName(Name + "\n\nStatus: " + Status + "\nProgress: " +  Progress + "%")
        }
    }

    function number table:visualize([Start End]:number)
    {
        if(!VLoading & VDone)
        {
            VLoading = 1
            VDone    = 0
            
            VLineCounter = Start
          
            CommentsText = ErrorText = TabSpaceText = PreprocText = StringsText = KeywordsText = VariablesText = TypesText = NumbersText = UserFunctionsText = FunctionsText = EnumsText = PPCommandsText = DefaultText = ""
        }
        else
        {         
            if(!VDone)
            {                   
                local Limit = This:count()
                
                while(perf())
                {
                    local Data = This[VLineCounter, table]
            
                    PreprocText       += Data["preproc",      string] + "\n"                       
                    DefaultText       += Data["default",      string] + "\n"
                    CommentsText      += Data["comment",      string] + "\n"
                    StringsText       += Data["string",       string] + "\n"
                    EnumsText         += Data["enum",         string] + "\n"
                    TypesText         += Data["type",         string] + "\n"
                    KeywordsText      += Data["keyword",      string] + "\n"
                    NumbersText       += Data["number",       string] + "\n"
                    FunctionsText     += Data["function",     string] + "\n"
                    PPCommandsText    += Data["ppcommand",    string] + "\n"
                    UserFunctionsText += Data["userfunction", string] + "\n"
                    VariablesText     += Data["variable",     string] + "\n"
                        
                    ErrorText    += Data["error", string]  + "\n"
                    TabSpaceText += Data["tabspc", string] + "\n"
                        
                    VLineCounter++
                    
                    if(VLineCounter > End | VLineCounter > Limit)
                    {
                        VDone = 1
                        break   
                    }
                }     
            }   
            else
            {
                local Colors = CVConfig["colors", table]
        
                addSyntax(1, PPCommandsText,    Colors["ppcommand", vector])       
                addSyntax(2, NumbersText,       Colors["number", vector])
                addSyntax(3, EnumsText,         Colors["enum", vector])        
                addSyntax(4, TypesText,         Colors["type", vector])
                addSyntax(5, FunctionsText,     Colors["function", vector])
                addSyntax(6, UserFunctionsText, Colors["userfunction", vector])
                addSyntax(7, CommentsText,      Colors["comment", vector])        
                addSyntax(8, PreprocText,       Colors["preproc", vector])
                addSyntax(9, VariablesText,     Colors["variable", vector])
                addSyntax(10, KeywordsText,     Colors["keyword", vector])
                addSyntax(11, StringsText,      Colors["string", vector])
                addSyntax(12, DefaultText,      Colors["unknown", vector])  
                 
                addSyntax(13, TabSpaceText,      Colors["tabspc", vector])  
                addSyntax(14, ErrorText,      Colors["error", vector])  

                VLoading = 0
                
                return 1                 
            }            
        }
        
        return 0         
    }
    
    function number initContext(Start, End)
    {
              
    }
    
    function void showContext()
    {
        local Colors = CVConfig["colors", table]

        addSyntax(1, PPCommandsText,    Colors["ppcommand",    vector])       
        addSyntax(2, NumbersText,       Colors["number",       vector])
        addSyntax(3, EnumsText,         Colors["enum",         vector])        
        addSyntax(4, TypesText,         Colors["type",         vector])
        addSyntax(5, FunctionsText,     Colors["function",     vector])
        addSyntax(6, UserFunctionsText, Colors["userfunction", vector])
        addSyntax(7, CommentsText,      Colors["comment",      vector])        
        addSyntax(8, PreprocText,       Colors["preproc",      vector])
        addSyntax(9, VariablesText,     Colors["variable",     vector])
        addSyntax(10, KeywordsText,     Colors["keyword",      vector])
        addSyntax(11, StringsText,      Colors["string",       vector])
        addSyntax(12, DefaultText,      Colors["unknown",      vector])  
         
        addSyntax(13, TabSpaceText,     Colors["tabspc",       vector])  
        addSyntax(14, ErrorText,        Colors["error",        vector])          
    }
    
    function void reloadVisualizedData()
    {
        local Total = ceil(512 / CVConfig["fontsize", number])
        local N = CVConfig["curline", number]
        
        setLineNumbers(N) 
        
        if(E2Data:visualize(N, N + Total))
        {
            setMode("idle")   
            LastLineIndex = N
        }              
    }
    
    function void visualizeData()
    {
        local Total = ceil(512 / CVConfig["fontsize", number])
        local N = CVConfig["curline", number]
        
        setLineNumbers(N) 

        if(E2Data:visualize(N, N + Total))
        {
            setMode("idle")   
            LastLineIndex = N
        }              
    }
    
    sucOut("Initialized.")
} 
elseif(last())
{
    EGP:egpClear()   
}

setUser(owner())
   
if(1)
{
    local NewCpuLimit = onArgsChat("cpu")
    if(NewCpuLimit)
    {
        CpuLimit = NewCpuLimit:toNumber()
        sucOut("CPU-Limit changed to: " + CpuLimit)
    }   
}

Mode()
