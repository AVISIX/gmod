@name E2Parser - V2

# [ --- Config --- ] #
@persist OpsLimit CpuLimit ReplaceSpacesWithTilde ShowLineBreak

# [ --- Misc --- ] # 
@persist 

# [ --- Parser --- ] #
@persist [Parsing Size] [Buffer LineCounter] [InComment InString] 
@persist [Result EventHistory Userfunctions]:table
@persist [Keywords Types]:array
@persist [Task Builder BlockType BlockEvent]:string
 
# [ --- Debug --- ] #
@persist E2Imported E2Importing E2ParsingDone


if(first())
{    
    # [ --- Config --- ] #
    OpsLimit = 999999
    CpuLimit = 999999
    
    ReplaceSpacesWithTilde = 0
    ShowLineBreak          = 0
    
    Keywords = array(
        "function", 
        "continue", 
        "foreach", 
        "default", 
        "elseif", 
        "return", 
        "local", 
        "break", 
        "switch", 
        "while", 
        "case", 
        "else", 
        "for", 
        "if"
    )
    
    Types = array(
        "wirelink", 
        "matrix2", 
        "matrix", 
        "matrix4", 
        "gtable", 
        "string", 
        "vector2",
        "vector4", 
        "array", 
        "table", 
        "gtable", 
        "gTable", 
        "angle",
        "vector", 
        "entity", 
        "number", 
        "void", 
        "normal", 
        "bone", 
        "quaternion"
    )
    
    # [ --- Helpers --- ] #
    function void warning(Output:string)
    {
        printColor(vec(255), "[",vec(255,255,0), "Warning", vec(255), "] ", vec(255,0,0), Output)    
    }

    function number string:isUpper()
    {
        local B = toByte(This)        
        return B >= 65 & B <= 90
    }
    
    function number string:isLower()
    {
        local B = toByte(This)        
        return B >= 97 & B <= 122
    }
    
    function number string:isLetter()
    {
        return This:isLower() | This:isUpper()     
    }
    
    function number string:isNumber()
    {
        local B = toByte(This)     
        return B >= 48 & B <= 57
    }
 
    function number string:isSpecial()
    {
        return !This:isLetter() & !This:isNumber()
    }

    function string string:last()
    {
        return This:index(This:length())   
    }

    # [ --- Parser --- ] #
    function string readNext()
    {
        Buffer++
        return Task:index(Buffer)
    }
    
    function string readPrev()
    {
        Buffer--
        return Task:index(Buffer)  
    }
    
    function string getNext()
    {
        return Task:index(Buffer + 1)   
    }

    function string getPrev()
    {
        return Task:index(Buffer - 1)   
    }
    
    function string peekWord(N)
    {
        return Task:sub(Buffer, Buffer + N)      
    }
  
    function void newLine()
    {
        LineCounter++
        
        Result[LineCounter, table] = table(
            "preproc"      = "",
            "comment"      = "",
            "string"       = "",
            "keyword"      = "",
            "variable"     = "",
            "type"         = "",
            "number"       = "",
            "userfunction" = "",
            "function"     = "",
            "enum"         = "",
            "ppcommand"    = "",
            "default"      = ""
        )    
        
        EventHistory = table()  
    }
  
    function void event([Type Text]:string)
    {
        local T   = Type == "" ? "default" : Type    
         
        local Txt = Text:replace("\n", "")  
        
        if(T == "userfunction")
        {
            Userfunctions[Txt, number] = 0
        }
        
        local Spaced = Txt:replaceRE(".", " ")         
        foreach(I, K:string = Result[LineCounter, table]:keys())
        {
            if(K == T)
            {
                Result[LineCounter, table][K, string] = Result[LineCounter, table][K, string] + Txt
                continue
            }
            
            Result[LineCounter, table][K, string] = Result[LineCounter, table][K, string] + Spaced
        }
        
        EventHistory[EventHistory:count() + 1, table] = table(
                                                            "type" = Type, 
                                                            "text" = Text)        
        Builder = ""
    }

    function table prevEvent(N)
    {
        return EventHistory[EventHistory:count() - N, table]
    }

    function void block([Type Event]:string)
    {
        BlockType  = Type
        BlockEvent = Event
    }

    function void unblock()
    {
        BlockType = BlockEvent = ""  
    }

    function void resetE2()
    {
        Task = ""
        LineCounter  = 0
        Size         = 0
        Buffer       = 0
        Result       = table()
        EventHistory = table()
        Userfunction = table()    
        Parsing = 0
        BlockType = ""
        BlockEvent = ""
    }
    
    function table string:parseE2()
    {
        if(!Parsing)
        {
            Task         = This
            LineCounter  = 0
            Size         = This:length()
            Buffer       = 0
            Result       = table()
            EventHistory = table()
            Userfunction = table()
            
            newLine()
            
            Parsing = 1   
        }
        else
        {
            while(perf())
            {
                #[
                    Result:
                        n:
                            preproc: ""   
                            comment: ""                           
                            string: "" 
                            keyword: ""    
                            variable: ""    
                            type: ""      
                            number: "" 
                            userfunction: "" 
                            function: "" 
                            enum: "" 
                            ppcommand: "" 
                            default: ""
                ]# 

                local C = readNext()

                if(Buffer > Size)
                {
                    if(Builder != "")
                    {
                        if(InComment)
                        {
                            event("comment", Builder)                               
                        }
                        elseif(InString)
                        {                            
                            event("string", Builder)   
                        }
                        else
                        {
                            event("", Builder)   
                        }
                    }
                    
                    Parsing = 0
                    
                    return Result    
                } 

                # [ --- Detector --- ] #
                if(!BlockType & !InComment & !InString)
                {
                    if(C == "\n")
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }                        
                        newLine()
                        continue   
                    }
                    
                    # [ --- Preprocessor --- ] #
                    if(C == "@" & (getPrev() == "\n" | Buffer == 1))
                    {
                        local Type = getNext()
                        
                        switch(Type)
                        {
                            case "n",
                            case "t",
                            case "m",
                            block("eol", "preproc") # Read shit until end of line, cause @name, @trigger & @model color the entire line yellow                      
                            break
                            
                            default,
                            block("ws", "preproc") # Read the other shit until " ", cause thats where the other colors start                           
                            break
                        }                                            
                    }     
                    
                    # [ --- Variables --- ] #
                    elseif(C:isUpper() & getPrev():isSpecial())
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }     
                        
                        block("var", "variable") # Read until the end of the variable                          
                    }                   
                    
                    # [ --- Keywords, Functions & Userfunctions --- ] #
                    elseif(C:isLower() & getPrev():isSpecial())
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }     
                        
                        block("404", "type")                    
                    }            
                    
                    # [ --- Comments --- ] #
                    elseif(C == "#")
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }                             
                        
                        if(getNext() == "[")
                        {
                            InComment = 1                           
                        }    
                        else
                        {
                            if(peekWord("include":length()) == "#include")
                            {
                                block("ws", "keyword")
                            }
                            elseif(peekWord("ifdef":length()) == "#ifdef")
                            {
                                block("ws", "ppcommand")  
                            }
                            elseif(peekWord("else":length()) == "#else" | peekWord("endif":length()) == "#endif")
                            {
                                block("eol", "ppcommand")   
                            }
                            else
                            {
                                block("eol", "comment")        
                            }                                                              
                        }  
                    }     
                    
                    # [ --- Strings --- ] #
                    elseif(C == "\"")
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }    
                        
                        Builder += C 
                        InString = 1   
                           
                        continue                     
                    }
                    
                    # [ --- Numbers --- ] #
                    elseif(C:isNumber())
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }    
                        
                        block("num", "number")                               
                    }
                    
                    # [ --- Enums --- ] #
                    elseif(C == "_")
                    {
                        if(Builder != "")
                        {
                            event("", Builder)
                        }    
                        
                        block("cst", "enum")                               
                    }
                }
                
                local Yield = 0
                
                # [ --- Handler --- ] #
                if(BlockType & !InComment & !InString) # No else cause I still want to use the C variable.
                {            
                    if(C == "\n") # Fuck all line breaks bruh
                    {
                        if(Builder != "")
                        {
                            event(BlockEvent, Builder)
                        }
                        newLine()
                        unblock()
                        continue
                    }   

                    switch(BlockType)
                    {
                        # [ --- Block Until End of Line --- ] #
                        case "eol",
                        if(C == "\n")
                        {
                            event(BlockEvent, Builder)
                            newLine()
                            unblock()  
                        }                           
                        break   
                        
                        # [ --- Block Until Whitespace --- ] #
                        case "ws",
                        if(C == " ")
                        {
                            event(BlockEvent, Builder)
                            unblock()
                        }                           
                        break
                        
                        # [ --- Block Until Variable --- ] #
                        case "var",
                        if(C:isSpecial() & C != "_")
                        {
                            event(BlockEvent, Builder)
                            unblock() 
                        }                       
                        break
                        
                        # [ --- Block Until End of Keyword, Function or Userfunction --- ] #
                        case "404",
                        if(getNext():isSpecial() & getNext() != "_")
                        {
                            Builder += C
                            
                            local IsKeyword = 0     
                                                                           
                            foreach(I, Keyword:string = Keywords)
                            {
                                if(Builder == Keyword)
                                {
                                    IsKeyword = 1
                                    break   
                                }   
                            }
                            
                            if(IsKeyword)
                            { 
                                event("keyword", Builder)
                                unblock()
                            }
                            else
                            {   
                                local N = getNext()
                                
                                if(N == "]" | N == ")" | N == "," | N == ":" | N == " " | N == "\n")
                                {
                                    if(prevEvent(1)["type", string] == "function" | prevEvent(1)["type", string] == "ppcommand") # ifdef number:myFunction(number)
                                    {
                                        event("function", Builder) 
                                    }
                                    else
                                    {
                                        event("type", Builder) 
                                    }                                              
                                }
                                else
                                {
                                    if(N == "(")
                                    {
                                        local POne   = prevEvent(1)
                                        local PThree = prevEvent(3)
                                        
                                        if(Userfunctions:exists(Builder))
                                        {
                                            event("userfunction", Builder)   
                                        }
                                        elseif(POne["type", string] == "keyword" & POne["text", string] == "function") # function myFunction()
                                        {
                                            event("userfunction", Builder)   
                                        }
                                        elseif(POne["type", string] == "type" & PThree["type", string] == "type" & prevEvent(5)["text", string] == "function") # function void entity:myFunction()
                                        {
                                            event("userfunction", Builder)   
                                        }
                                        elseif(POne["type", string] == "type" & PThree["text", string] == "function") # function void myunction() & function entity:myFunction()
                                        {
                                            event("userfunction", Builder)  
                                        }
                                        else
                                        {
                                            event("function", Builder) 
                                        }
                                    }
                                    else
                                    {
                                        event("", Builder)
                                    } 
                                }
                               
                                unblock()                            
                            }
                            
                            Yield = 1                                                                                           
                        }                        
                        break
                        
                        # [ --- Block Until End of Number --- ] #
                        case "num",
                        if(C != "e" & !C:isNumber() & C != "x" & !C:isLetter() & !C:isUpper())
                        {
                            event(BlockEvent, Builder)
                            unblock()   
                        } 
                        break
                        
                        # [ --- Block Until End of Enum --- ] #
                        case "cst",
                        if(C:isSpecial() & C != "_")
                        {
                            event(BlockEvent, Builder)
                            unblock()                                     
                        }
                        break
                    }                
                }
                elseif(InComment)
                {
                    if(C == "#" & getPrev() == "]")
                    {
                        event("comment", Builder + C)
                        InComment = 0   
                        continue       
                    }
                    elseif(C == "\n")
                    {
                        if(Builder != "")
                        {
                            event("comment", Builder)
                        }
                        newLine()
                        continue
                    }                       
                }
                elseif(InString)
                {
                    if(C == "\"")
                    {
                        if(getPrev() != "\\")
                        {
                            event("string", Builder + C)
                            InString = 0   
                            continue      
                        }        
                        elseif(Task:index(Buffer - 2) == "\\")
                        {
                            event("string", Builder + C)
                            InString = 0   
                            continue                                      
                        }             
                    }
                    elseif(C == "\n")
                    {
                        if(Builder != "")
                        {
                            event("string", Builder)
                        }
                        newLine()
                        continue
                    }                    
                }  
                
                if(Yield)
                {
                    continue   
                }
                
                Builder += C                                  
            }      
        }
    
        return table()
    }

    function number e2Progress()
    {
        return (100 / Size) * Buffer
    }








    # [ --- Debugger --- ] # 
    function void e2LibDebug(File:string)
    {
        if(!E2Imported)
        {
            runOnFile(1)
            runOnTick(1)
          
            if(!E2Importing & fileCanLoad())
            {
                fileLoad(File)
                E2Importing = 1   
            }
            else
            {
                if(fileClk() & !fileLoading())
                {
                    if(fileStatus() == _FILE_OK)
                    {
                        E2Importing = 0     
                        E2Imported  = 1 
                        
                        hint("Loaded", 3)
                    }   
                    else
                    {           
                        E2Importing = 0    
                        E2Imported  = 1
                    }
                }   
            }  
        }
        else
        {
            if(!E2ParsingDone)
            {
                local Result = fileRead():parseE2()
                
                setName("Prog: " + e2Progress() + "%")
                
                if(Result:count() > 0)
                {
                    E2Importing = 0
                    E2Imported  = 0
                    
                    printTable(Result)
                
                    runOnFile(0)
                    runOnTick(0)                       
                }
            } 
        }        
    }       
}

#e2LibDebug(">e2shared/spiderwalker-v1.txt")

