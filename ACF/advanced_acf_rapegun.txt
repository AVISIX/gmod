@name Advanced ACF Rapegun
@persist [Ammos Guns Reloaders]:array [ToggleGunKey ToggleAmmoKey Fire ReLink UnlinkOnReload SavePropsOnReload ArrangeAroundUser ArrangeRadius ToggleMinger]:number 
@persist [GunColor AmmoColor ArrangePos]:vector SavedProps:gtable Secret:string [MingerActive DeleteCratesIfNoAmmo ReadyToFire StillReloading Reloading]:number
@persist [RotationSpeed RotationC PrevGunCount]:number [CurAmmoType]:string
@model models/props_c17/FurnitureToilet001a.mdl
#ifdef entity:acfFire(number)
#[
    This code was written by Sixmax (STEAM_0:0:104139026).
    
    You may use this in your projects but not claim it as yours (Check License: https://github.com/Sixmax/gmod/blob/master/license.txt)
    Abuse may cause an inconvenience on your and my side. So please respect my work and follow the licensing.
]#
interval(100)
runOnLast(1)

Fire          = owner():keyPressed("1")
ToggleGunKey  = owner():keyPressed("2")
ToggleAmmoKey = owner():keyPressed("3")
ReLink        = owner():keyPressed("4")
ToggleMinger  = owner():keyPressed("5")

ArrangePos = owner():pos() + vec(0, 0, 500)

#[
    To do's
    
    - Add Firing Types such as sequential firing
    - Somehow detect if weapon & Ammo type can be paired. (NOT acfAmmoType, shit didnt work) Try using models & patterns later
]#

if(first())
{   
    MingerActive = 1
    
    ArrangeRadius = 60
    ArrangeAroundUser = 1
    UnlinkOnReload    = 0
    SavePropsOnReload = 1
    DeleteCratesIfNoAmmo = 1 
    RotationSpeed = 5
    
    GunColor  = vec(150,25,25)
    AmmoColor = vec(100,25,100)
    
    Secret = owner():steamID() + "SIXMAXADVACFRAPEGUNV1"
    
    setName("Anti-Hijack E2")
    
    function number entity:isAmmo()
    {
        #ifdef entity:acfIsAmmo()
        if(This:isValid())
        {
            return This:acfIsAmmo()
        }
        #else
        print("acfIsAmmo is not installed")
        #endif    
        
        return 0       
    }

    function number entity:isGun()
    {
        #ifdef entity:acfIsGun()
        if(This:isValid())
        {
            return This:acfIsGun()
        }
        #else
        print("acfIsAmmo is not installed")
        #endif    
        
        return 0       
    }
    
    function string entity:ammoType()
    {
        return ""
    
        # Shitty broken garbage cancer
    
        #[
        #ifdef entity:acfType()
        if(This:isValid())
        {
            return This:acf()   
        }
        #else
        print("acfType is not installed")
        #endif
    
        return ""
        ]#
    }
    
    function void entity:link(Link:entity)
    {
        #ifdef entity:acfLinkTo(entity, number)
        if(This:isValid() && Link:isValid())
        {
            This:acfLinkTo(Link, 1)
        }
        #else
        print("acfLinkTo is not installed")
        #endif
    } 
    
    function number entity:isReloading()
    {
        #ifdef entity:acfIsReloading()
        if(This:isValid() && This:isGun())
        {
            return This:acfIsReloading()      
        }
        #else
        print("acfIsReloading is not installed")
        #endif   
    }
    
    function void entity:unlinkFrom(Unlink:entity)
    {
        #ifdef entity:acfUnlinkFrom(entity, number)
        if(This:isValid() && Unlink:isValid())
        {            
            This:acfUnlinkFrom(Unlink, 1)
        }
        #else
        print("acfUnlinkFrom is not installed")
        #endif
    }
    
    function array entity:links()
    {
        #ifdef entity:acfLinks()  
        if(This:isValid())
        {
            return This:acfLinks()
        }
        #else
        print("acfLinks is not installed")
        #endif           
        
        return array()
    }
    
    function number entity:totalAmmoCount()
    {
        #ifdef entity:acfTotalAmmoCount()
        if(This:isValid() && This:isGun())
        {     
            return This:acfTotalAmmoCount()   
        }
        #else
        print("acfTotalAmmoCount not installed")    
        #endif   
    
        return 65644
    }
    
    function number entity:isLinkedTo(Object:entity)
    {
        if(!Object:isValid() || !This:isValid())
        {
            return 0   
        }
        
        local Links = This:links()
        
        if(Links:count() == 0)
        {
            return 0   
        }
        
        foreach(I, Link:entity = Links)
        {  
            if(Object == Link)
            {
                return 1              
            }                     
        }
      
        return 0
    }

    function number array:exists(Some:entity)
    {
        if(This:count() == 0 || !Some:isValid())
        {
            return 0   
        }
        
        for(I = 0, This:count())
        {
            local Item = This[I, entity]
            
            if(Item == Some)
            {
                return 1    
            }    
        }  
        
        return 0
    }
    
    function void array:remove(Some:entity)
    {
        if(This:count() == 0 || !Some:isValid())
        {
            return    
        }  
        
        for(I = 0, This:count())
        {
            local Item = This[I, entity]
            
            if(Item == Some)
            {
                This:remove(I)
                
                break
            }    
        }        
    }

    function void array:colorElements(Color:vector)
    {
        if(This:count() == 0)
        {
            return    
        }   
        
        foreach(I, Prop:entity = This)
        {
            if(Prop:getColor() != Color)
            {
                Prop:setColor(Color)  
            }   
        }
    }
    
    function void entity:resetColor()
    {
        This:setColor(vec(255,255,255))   
    }

    function number entity:addGun()
    {
        if(!This:isValid())
        {
            return 0   
        }
        
        if(!Guns:exists(This))
        {
            Guns:pushEntity(This)

            return 1   
        }
         
        return 0 
    }
    
    function number entity:removeGun()
    {
        if(!This:isValid())
        {
            return 0   
        }
        
        if(Guns:exists(This))
        {
            Guns:remove(This)

            return 1   
        }
         
        return 0            
    }
    
    function number entity:addAmmo()
    {
        if(!This:isValid())
        {
            return 0   
        }

        if(!Ammos:exists(This))
        {
            Ammos:pushEntity(This)

            return 1   
        }
         
        return 0 
    }
    
    function number entity:removeAmmo()
    {
        if(!This:isValid())
        {
            return 0   
        }

        if(Ammos:exists(This))
        {
            Ammos:remove(This)

            return 1   
        }
         
        return 0            
    }       
    
    function void updateLinks()
    {
        if(Guns:count() == 0)
        {
            return   
        }   
        
        if(Ammos:count() == 0)
        {
            return
        }
        
        foreach(B, Ammo:entity = Ammos)
        {  
            if(Ammo:isValid())
            {        
                foreach(A, Gun:entity = Guns)
                {              
                    if(Gun:isValid())
                    {        
                        if(!Gun:isLinkedTo(Ammo))
                        {
                            Gun:link(Ammo)    
                        }
                    }
                }   
            }
        }
    }
    
    function number entity:unlink()
    {
        if(!This:isValid())
        {
            return 0   
        }

        local Links = This:links()
    
        if(Links:count() > 0)
        {
            foreach(I, Link:entity = Links)
            {
                if(This:isGun())
                {
                    if(This:isLinkedTo(Link))
                    {
                        This:unlinkFrom(Link)   
                    }
                }
                elseif(This:isAmmo())
                {
                    if(Link:isLinkedTo(This))
                    {
                        Link:unlinkFrom(This)   
                    }  
                }
            }   
            
            return 1
        }
        
        return 0
    }
    
    function void entity:makeMunitionsLink()
    {
        if(!This:isValid())
        {
            return   
        }        

        #ifdef entity:createWire(entity, string, string)
            This:createWire(This, "Active", "Munitions")
        #else
            print("This crate has to be wire'd manually")
        #endif
    } 

    function number entity:hasValidAmmoType()
    {
        if(!This:isValid())
        {
            return 0
        }
        
        if(CurAmmoType:replaceRE("%s", "") == "")
        {
            CurAmmoType = This:ammoType()
        }
        
        if(This:ammoType() != CurAmmoType)  
        {
            return 0   
        } 
        
        return 1
    }

    function void checkForEmptyCrates()
    {
        if(DeleteCratesIfNoAmmo)
        {
            if(Ammos:count() == 0)
            {
                return   
            }   
            
            foreach(I, Gun:entity = Guns)
            {
                if(!Gun:isValid())
                {
                    break
                }
                
                if(Gun:totalAmmoCount() == 0
                && Gun:totalAmmoCount() != 65644)
                {
                    if(Gun:links():count() != Ammos:count())
                    {
                        break   
                    }
                    
                    foreach(B, Ammo:entity = Ammos)
                    {
                        Ammo:unlink()
                        Ammo:removeAmmo()
                        Ammo:resetColor()
                        Ammo:propDelete()
                    }   
                }
            }
        }
    }
    
    timer("backgroundWorker", 1000)
    
    function void checkData()
    {
        if(Guns:count() > 0)
        {
            foreach(I, Gun:entity = Guns)
            { 
                if(!Gun:isValid() || Gun == noentity())
                {
                    Guns:remove(I)
                    
                    hint("Invalid Gun detected", 2)                       
                }   
            }
        }
        
        if(Ammos:count() > 0)
        {        
            foreach(I, Ammo:entity = Ammos)
            {
                if(!Ammo:isValid() || Ammo == noentity())
                {
                    Ammos:remove(I)
                    
                    hint("Invalid Ammocrate detected", 2)                                 
                }   
            }
        }
    
        updateLinks()            
    }

    local PrevD = gTable(Secret)  

    if(PrevD:count() != 0)
    {        
        print("Loading saved data...")

        local Gunz  = PrevD["Guns", array ]
        local Ammoz = PrevD["Ammos", array]
        
        if(Gunz:count() > 0)
        {
            foreach(I, Gun:entity = Gunz)
            {
                if(Gun:isValid())
                {
                    if(!Guns:exists(Gun))
                    {
                        Guns:pushEntity(Gun)
                    }
                }
                else
                {
                    checkData()   
                }
            }              

            if(Guns:count() > 0)
            {
                Guns:colorElements(GunColor)   
            }
        }
        
        if(Ammoz:count() > 0)
        {
            foreach(I, Ammo:entity = Ammoz)
            {
                if(Ammo:isValid())
                {
                    if(!Ammos:exists(Ammo))
                    {
                        Ammos:pushEntity(Ammo)
                    }
                }
            }   
            
            if(Ammos:count() > 0)
            {
                Ammos:colorElements(AmmoColor)   
            }
        }
        
        updateLinks()
    }

    if(ArrangeAroundUser)
    {
        holoCreate(1000, ArrangePos, vec(1), ang(), vec(255), "cube")
        holoAlpha(1000, 0)       
    }
    
    function void buildMinger()
    {
        #ifdef entity:setPos(vector)
        if(ArrangeAroundUser)
        {
            local APos = ArrangePos
            local HE = holoEntity(1000)
            
            rangerFilter(Ammos)
            rangerFilter(Guns)
            rangerFilter(owner())
            local AimRan = rangerOffset(99999, owner():shootPos(), (owner():aimPos() - owner():shootPos()):toAngle():forward()):position()
            
            local Dir = (HE:pos() - AimRan):toAngle()
                      
            if(MingerActive)
            {                
                holoPos(1000, APos)
                holoAng(1000, Dir)
            }
            else
            {
                AimRan = rangerOffset(99999, HE:toWorld(vec()), HE:forward() * -1):position()
                Dir = (HE:pos() - AimRan):toAngle()  
            }
                       
            if(Guns:count() > 0)
            {
                foreach(I, Gun:entity = Guns)
                {
                    if(Gun:isValid())
                    {                                     
                        if(Gun:isFrozen() == 0)
                        {
                            Gun:propFreeze(1)   
                        }            
                        
                        local DirG = (AimRan - Gun:boxCenterW()):toAngle()
                        
                        local Pitch = -DirG:pitch()                           
                        local Yaw = DirG:yaw()
                        
                        if(Guns:count() > 1)
                        {
                            local Y = cos((360 / Guns:count()) * I + RotationC) * ArrangeRadius
                            local Z = sin((360 / Guns:count()) * I + RotationC) * ArrangeRadius        
                                                
                            Gun:setPos(HE:toWorld(vec(0, Y, Z)))                                                                                     
                            Gun:setAng(DirG + ang(0,0,(-(360 / Guns:count()) * I) - RotationC - 90))
                        }
                        else
                        {
                            Gun:setPos(HE:toWorld(vec(0, 0, 0)))
                            Gun:setAng(Dir + ang(180, 0, 180))                                                                   
                        }
                    }
                    else
                    {
                        checkData()   
                    }
                }                
            
                if(Guns:count() > 1)
                {                        
                    if(RotationSpeed != 0)
                    {
                        RotationC = RotationC + RotationSpeed
                        
                        if(RotationC >= 360 || RotationC < 0)
                        {
                            RotationC = 0
                        }
                    }
                } 
            }
            
            if(Ammos:count() > 0)
            {
                foreach(I, Ammo:entity = Ammos)
                {
                    if(Ammo:isValid())
                    {    
                        if(Ammo:isFrozen() == 0)
                        {
                            Ammo:propFreeze(1)   
                        }    
                        
                        local Dist = ArrangeRadius / Ammos:count()
                        Ammo:setPos(HE:toWorld(vec(#[(Ammos:count() * Dist) / 2]# Dist / 2 + (I * Dist),0,-Ammo:height() / 2)))
                        Ammo:setAng(HE:angles())
                    }
                    else
                    {
                        checkData()   
                    }
                }                            
            }
        }  
        #endif 
    }
}

Limit = 10000

if(hostname():replaceRE("%s", ""):lower():find("real"))
{
    Limit = 1000   
}

if(ops() < Limit && perf())
{
    local Prop = owner():aimEntity()
    
    if(Prop:isValid())
    {        
        if(changed(ToggleGunKey) && ToggleGunKey)
        {
            if(!Ammos:exists(Prop))
            {            
                if(Prop:isGun())
                {
                    if(Guns:exists(Prop))
                    {
                        local Remove = Prop:removeGun()
                        
                        if(Remove == 0)
                        {
                            hint("Failed to remove:" + Prop:id(), 5)   
                        }   
                        else
                        {
                            hint("Removed Gun: " + Prop:id(), 5) 
    
                            Prop:unlink()
                            
                            Prop:resetColor()  
                        }
                    }
                    else
                    {
                        if(Prop:hasValidAmmoType())
                        {                       
                            local Add = Prop:addGun()
                        
                            if(Guns:count() > 0)
                            {
                                foreach(I, Gun:entity = Guns)
                                {
                                    if(Gun != Prop)
                                    {
                                        Gun:acfUnload()
                                        Gun:acfFire(1)
                                        Gun:acfFire(0)
                                    }    
                                }   
                            }
                        
                            if(Add == 0)
                            {
                                hint("Failed to add:" + Prop:id(), 5)   
                            } 
                            else
                            {
                                hint("Added Gun: " + Prop:id(), 5)   
                                
                                updateLinks()
                                
                                Guns:colorElements(GunColor)
                            }
                        }
                        else
                        {
                            print("The selected Weapon (" + Prop:ammoType() + ") cannot be connected with the current Ammo type (" + Ammos[0, entity]:ammoType() + ") ")   
                        }
                    }
                } 
                else
                {
                    hint("Prop is not a Gun", 5)   
                }
            }
            else
            {
                hint("Prop is part of Ammos", 5)   
            }
        }
        
        if(changed(ToggleAmmoKey) && ToggleAmmoKey)
        {
            if(Prop:isAmmo())
            {
                if(!Guns:exists(Prop))
                {  
                    if(Ammos:exists(Prop))
                    {
                        local Remove = Prop:removeAmmo()
                        
                        if(Remove == 0)
                        {
                            hint("Failed to remove:" + Prop:id(), 5)   
                        }   
                        else
                        {
                            hint("Removed Ammo: " + Prop:id(), 5)   
                            
                            Prop:unlink()
                            
                            Prop:resetColor()  
                        }
                    }
                    else
                    {
                        if(Prop:hasValidAmmoType())
                        {         
                            local Add = Prop:addAmmo()
                            
                            if(Add == 0)
                            {
                                hint("Failed to add:" + Prop:id(), 5)   
                            } 
                            else
                            {
                                hint("Added Ammo: " + Prop:id(), 5)   
                                
                                updateLinks()
                                
                                Prop:makeMunitionsLink()
                                
                                Ammos:colorElements(AmmoColor)
                            }
                        }
                        else
                        {
                            print("The selected Ammo (" + Prop:ammoType() + ") cannot be connected with the current Weapon type (" + Guns[0, entity]:ammoType() + ") ")   
                        }
                    }
                }
                else
                {
                    hint("Prop is part of Guns", 5)   
                } 
            }
            else
            {
                hint("Prop is not an Ammobox", 5)   
            }
        }
    }
    
    if(changed(ReLink) && ReLink)
    {
        if(Guns:count() > 0)
        {
            foreach(I, Gun:entity = Guns)
            {
                if(Gun:isValid())
                {
                    Gun:unlink()  
                } 
                else
                {
                    checkData()   
                }
            }
            
            updateLinks()
        }
    }
    
    if(changed(ToggleMinger) && ToggleMinger)
    {
        MingerActive = !MingerActive       
    }
    
    if(Guns:count() > 0)
    {
        if(Fire && !Reloading)
        {    
            if(!Reloading)
            {
                foreach(I, Gun:entity = Guns)
                {
                    if(Gun:isValid())
                    {
                        if(!Gun:isReloading())
                        {
                           Gun:acfFire(1)  
                        }
                        else
                        {   
                            if(Ammos:count() > 0)
                            {
                                hint("Reloading...", 3)
         
                                timer("stillReloadingNotificationCooldown", 1500)
                               
                                Reloading = StillReloading = 1
                            }
                            else
                            {                               
                                timer("stillReloadingNotificationCooldown", 500)
                                           
                                StillReloading = 2
                            }
                            
                            break
                        }  
                    }
                    else
                    {
                        checkData()   
                    }
                }
            }
        }
        else
        {
            if(Reloading)
            {
                foreach(I, Gun:entity = Guns)
                {
                    if(Gun:isValid())
                    {
                        Gun:acfFire(0)  
                    } 
                    else
                    {
                        checkData()   
                    }   
                }
                
                local ReloadingDone = 1
                
                foreach(I, Gun:entity = Guns)
                {
                    if(Gun:isValid())
                    {
                        if(Gun:isReloading())
                        {
                            ReloadingDone = 0
                        }
                    }
                    else
                    {
                        checkData()   
                    }
                }    
                
                if(ReloadingDone)
                {
                    hint("Finished reloading", 3)
                    
                    Reloading = 0
                }
            }
            else
            {
                foreach(I, Gun:entity = Guns)
                {
                    Gun:acfFire(0)      
                }
            } 
        }
        
        if(Fire && Reloading)
        {
            if(StillReloading == 0)
            {
                hint("Still reloading...", 3)
                   
                StillReloading = 1
                
                timer("stillReloadingNotificationCooldown", 1500)
            }                 
        }
    }
    
    checkForEmptyCrates()
    
    buildMinger()
}

if(clk("stillReloadingNotificationCooldown"))
{
    if(StillReloading == 2)
    {
        hint("No Ammo", 3)                                        
    }
    
    StillReloading = 0
    
    stoptimer("stillReloadingNotificationCooldown")
}

if(clk("backgroundWorker"))
{  
    checkData()

    if(Ammos:count() == 0 && Guns:count() == 0)
    {
        CurAmmoType = ""   
    }

    #ifdef timerRunning(string)
        timer("backgroundWorker", 1000)
    #endif
}

if(last())
{
    if(SavePropsOnReload)
    {
        SavedProps = gTable(Secret)
        
        SavedProps:clear()
        
        
        SavedProps["Guns", array] = array()
        
        foreach(I, Gun:entity = Guns)
        {
            if(Gun:isValid())
            {
                if(!SavedProps["Guns", array]:exists(Gun))
                {
                    SavedProps["Guns", array]:pushEntity(Gun) 
                }
            }
        }
        
        
        SavedProps["Ammos", array] = array()
        
        foreach(I, Ammo:entity = Ammos)
        {
            if(Ammo:isValid())
            {
                if(!SavedProps["Ammos", array]:exists(Ammo))
                {
                    SavedProps["Ammos", array]:pushEntity(Ammo) 
                }
            }
        }
        
        
        if(SavedProps["Guns", array]:count() > 0 && SavedProps["Ammos", array]:count() > 0)
        {
            print("Saved " + SavedProps["Guns", array]:count() + " Guns and " + SavedProps["Ammos", array]:count() + " Ammoboxes.")
        }
    } 
    else
    {
        SavedProps = gTable(Secret)       
        SavedProps:clear()        
    }

    if(Ammos:count() < Guns:count())
    {
        foreach(I, Ammo:entity = Ammos)
        {
            if(Ammo:isValid())
            {
                Ammo:resetColor()
                
                !UnlinkOnReload ?: Ammo:unlink()
            }
        }          
        
        foreach(I, Gun:entity = Guns)
        {
            Gun:resetColor()
        }              
    }
    elseif(Guns:count() < Ammos:count())
    {
        foreach(I, Gun:entity = Guns)
        {
            if(Gun:isValid())
            {
                Gun:resetColor()
                
                !UnlinkOnReload ?: Gun:unlink()
            }
        }            

        foreach(I, Ammo:entity = Ammos)
        {
            Ammo:resetColor()
        }     
    }
    else
    {
        foreach(I, Gun:entity = Guns)
        {
            if(Gun:isValid())
            {            
                Gun:resetColor()
                
                !UnlinkOnReload ?: Gun:unlink()
            }
        } 
        
        foreach(I, Ammo:entity = Ammos)
        {
            if(Ammo:isValid())
            {
                Ammo:resetColor()
            }
        }               
    }      
}

#else

selfDestructAll()
print("An essential ACF Funtion(acfFire) is missing to make this Code work properly")
    
#endif
