@name Midi Library V2

# [ Config ] #
@persist MidiPerf 

# [ Parser ] #
@persist MidiBuffer MidiParsing MidiTempo LastStatus MidiDone MidiInTrack MidiParsingProgress LongestTime
@persist [MidiResult TempTrack]:table

# [ Debug ] #
@persist MidiDebugImporting MidiDebugImported MidiDebugDone

if( first() )
{
    MidiPerf = 90
 
    #[
        Midi will be returned in a JSON type format.
        
        The format is:
            
        Midi:
            header:
                > Format
                > Trackcount
                > Division
                > Playtime
            
            tracks:
                n: 
                    meta:
                        > text
                        > name
                        > copyright
                        > instrument
                        
                    events:
                        n:
                            > note
                            > channel
                            > velocity
                            > type
                            > volume
                            > pitch
                            > delta 
                            > timing
        
        
        "n" is any number.
    ]#
      
    function void midiLibReset()
    {
        MidiBuffer  = 0
        MidiDone    = 1
        MidiParsing = 0
        MidiTempo   = 120
        LastStatus  = -1

        MidiParsingProgress = 0
        MidiDebugImporting  = 0
        MidiDebugImported   = 0    
        
        TempTrack                   = table()       
        MidiResult                  = table()
        MidiResult["header", table] = table()
        MidiResult["tracks", table] = table()
    }
    
    function number string:b()
    {
        return toByte(This)   
    }

    function string eventType(Status)
    {
        switch(Status)
        {
            case 0x80, return "Note Off"           break
            case 0x90, return "Note On"            break
            case 0xA0, return "Aftertouch"         break
            case 0xB0, return "Controller"         break
            case 0xC0, return "Program Change"     break
            case 0xD0, return "Channel Aftertouch" break
            case 0xE0, return "Pitch"              break             
        }
        return ""   
    }

    function void warning(Output:string)
    {
        printColor(vec(255), "[",vec(255,255,0), "Warning", vec(255), "] ", vec(255,0,0), Output)    
    }

    function string string:cur()
    {
        return This:index(MidiBuffer)   
    }

    function number string:readNext()
    {
        MidiBuffer++
        return This:cur():b()               
    }
    
    function string string:readNextChar()
    {
        MidiBuffer++
        return This:cur()               
    }
    
    function string string:readLength(Len)
    {
        local Temp = ""
        for(I = 1, Len)
        {
            Temp += This:readNextChar()   
        }   
        return Temp
    }

    function number string:hexToNumber()
    {
        local Result = "0x"     
        foreach(I, Char:string = This:explode(""))
        {
            Result += toString(Char:b(), 16)
        }
        return Result != "0x" ? Result:toNumber(16) : 0
    }

    function number string:readDelta()
    {
        local Result = 0
        for(C = 1, 4)
        {   
            local Byte = This:readNext()   

            Result = Result << 7 
            Result = Result || (Byte && 0x7F)
            
            if((Byte && 0x80) != 0x80)
            {
                return Result   
            }       
        }
        return Result   
    }

    function number volume(Velocity)
    {
        return (1 / 127) * Velocity 
    }

    function number pitch(Note)
    {
        return floor(2 ^ ((Note + 5) / 12), 1)
    }

    function number realtime(Delta, A, B)
    {
        return (Delta * 60) / (A * B)   
    }   
    
    function table string:decodeMidi(Tempo:number)
    {
        local Result = table()
 
        while(perf(MidiPerf))
        {       
            if(MidiDone & !MidiParsing)
            {
                MidiBuffer = 0
                
                if(This:readLength(4) != "MThd")
                {
                    error("The given string was not a Midi Bytecode.")   
                }   
                
                if(This:readLength(4):hexToNumber() != 6)
                {
                    error("Invalid Headersize detected.")   
                }
                
                local Format = This:readLength(2):hexToNumber()
                if(Format < 0 | Format > 2)
                {
                    error("Invalid Format detected.(" + Format + ")")   
                }
                
                local Tracks = This:readLength(2):hexToNumber()
                if(Tracks < 0 | Tracks > 65535)
                {
                    error("Invalid Track Count detected.(" + Tracks + ")")   
                }
                
                if(Format == 0 & Tracks > 1)
                {
                    error("Cannot have multiple tracks with type 0 format.")   
                }

                local Division = This:readLength(2):hexToNumber()    
                
                if(Division <= 0)
                {
                    Division = 120   
                }

                TempTrack                   = table()       
                MidiResult                  = table()
                MidiResult["header", table] = table()
                        
                MidiResult["header", table]["format", number]   = Format
                MidiResult["header", table]["tracks", number]   = Tracks
                MidiResult["header", table]["division", number] = Division
                MidiResult["header", table]["playtime", number] = 0
                MidiResult["tracks", table]                     = table()
                
                MidiTempo           = Tempo
                LastStatus          = 0
                MidiDone            = 0
                MidiParsing         = 1      
                MidiInTrack         = 0                
                MidiParsingProgress = 0
            }   
            else
            {
                if(!MidiInTrack)
                {   
                    if(This:readLength(4) == "MTrk")
                    {
                        local TrackSize = This:readLength(4):hexToNumber()
                        TempTrack       = table("meta"=table("playtime"=0),"events"=table())
                        MidiInTrack     = 1   
                        LastStatus      = 0
                    }  
                    else
                    {
                        error("Failed to find next Track.")   
                    }
                }   
                else
                {
                    local Delta   = This:readDelta()                    
                    local Current = This:readNext()
                    
                    local Real = realtime(Delta, MidiTempo, MidiResult["header", table]["division", number])               
                    TempTrack["meta", table]["playtime", number] = TempTrack["meta", table]["playtime", number] + Real
                                        
                    if((Current && 0xF0) == 0xF0)
                    {
                        if(Current == 0xFF)
                        {
                            local MetaType   = This:readNext()
                            local MetaLength = This:readNext()        
                            local MetaValue  = This:readLength(MetaLength)      
                    
                            switch(MetaType)
                            {
                                case 0x2F,                           
                                if(TempTrack["meta", table]["playtime", number] > MidiResult["header", table]["playtime", number])
                                {
                                    MidiResult["header", table]["playtime", number] = TempTrack["meta", table]["playtime", number]   
                                }
                                MidiInTrack = 0                                
                                MidiResult["tracks", table][MidiResult["tracks", table]:count() + 1, table] = TempTrack                                   
                                break   
                                
                                case 0x01,
                                if(MetaLength)
                                {
                                    TempTrack["meta", table]["text", string] = MetaValue
                                } 
                                break
                                
                                case 0x02,
                                if(MetaLength)
                                {
                                    TempTrack["meta", table]["copyright", string] = MetaValue
                                }
                                break
                                
                                case 0x03,     
                                if(MetaLength)
                                {
                                    TempTrack["meta", table]["name", string] = MetaValue 
                                }                           
                                break
                                
                                case 0x04,
                                if(MetaLength)
                                {
                                    TempTrack["meta", table]["instrument", string] = MetaValue
                                }
                                break
                                
                                case 0x51,
                                MidiTempo = round(60000000 / MetaValue:hexToNumber())  
                                break
                                
                                case 0x00, 
                                case 0x05, 
                                case 0x06, 
                                case 0x07, 
                                case 0x58, 
                                case 0x59, 
                                break
                            }
                        }
                        elseif(Current == 0xF0 | Current == 0xF7)
                        {
                            local SySexData = This:readLength(This:readDelta())                             
                        }
                        else
                        {
                            error("Unknown Meta Event(" + toString(Current, 16) + ")")   
                        }
                    }
                    else
                    {
                        local Status = (Current && 0xF0)
                        
                        if((Current && 0x80) == 0)
                        {
                            Status = LastStatus   
                            MidiBuffer--
                        }
                        
                        if(Status >= 0x80 & Status <= 0xE0)
                        {
                            local Channel = (Current && 0x0F)
                            
                            if(Status == 0x80 | Status == 0x90)
                            {
                                
                                local Note = This:readNext()                                                                  
                                if(Note >= 0 & Note <= 127)
                                {
                                    
                                    local Velocity = This:readNext()                                   
                                    if(Velocity >= 0 & Velocity <= 127)
                                    {
                                        local Type = eventType(Status)
                                        
                                        if(Type == "Note On" & Velocity == 0)
                                        {
                                            Type = "Note Off"   
                                        }
                                        
                                        local Volume = volume(Velocity)
                                        local Pitch  = pitch(Note)
                                        
                                        TempTrack["events", table][TempTrack["events", table]:count() + 1, table] = table("type"     = Type,
                                                                                                                          "note"     = Note,
                                                                                                                          "channel"  = Channel,
                                                                                                                          "velocity" = Velocity,
                                                                                                                          "volume"   = Volume,
                                                                                                                          "pitch"    = Pitch,
                                                                                                                          "delta"    = Real,
                                                                                                                          "timing"   = TempTrack["meta", table]["playtime", number])
                                    }
                                }                            
                            }
                            elseif(Status == 0xA0 | Status == 0xE0 | Status == 0xB0)
                            {   
                                local Param1 = This:readNext()   
                                local Param2 = This:readNext()
                            }       
                            elseif(Status == 0xD0 | Status == 0xC0)
                            {
                                local Param = This:readNext() # These 2 states only have 1 databyte
                            }
                        }
                        else
                        {
                            error("Unknown Status Byte detected(" + toString(Current, 16) + ")")   
                        }    
                        
                        LastStatus = Status                          
                    }                 
                }     
            }
            
            MidiParsingProgress = (100 / This:length()) * MidiBuffer
            
            if(MidiBuffer >= This:length())
            {
                if(MidiInTrack)
                {
                    if(TempTrack["meta", table]["playtime", number] > MidiResult["header", table]["playtime", number])
                    {
                        MidiResult["header", table]["playtime", number] = TempTrack["meta", table]["playtime", number]   
                    }
                    MidiInTrack = 0                                
                    MidiResult["tracks", table]:pushTable(TempTrack)       
                    TempTrack = table("meta"=table("playtime"=0),"events"=table())
                }
                
                MidiTempo           = 120
                MidiParsingProgress = 100
                MidiDone            = 1
                MidiParsing         = 0
                MidiBuffer          = 0
                Result              = MidiResult
                break   
            }
        }
        
        return Result
    }
    
    function number isParsing()
    {
        return !MidiDone & MidiParsing    
    }
    
    function number parsingDone()
    {
        return !isParsing()   
    }

    function number getParsingProgress()
    {
        return MidiParsingProgress  
    }
    
    function void midiLibDebug(File:string)
    {
        if(!MidiDebugImported)
        {
            runOnFile(1)
            runOnTick(1)
          
            if(!MidiDebugImporting & fileCanLoad())
            {
                fileLoad(File)
                MidiDebugImporting = 1   
            }
            else
            {
                if(fileClk() & !fileLoading())
                {
                    if(fileStatus() == _FILE_OK)
                    {
                        MidiDebugImporting = 0     
                        MidiDebugImported = 1 
                        hint("Loaded", 3)
                    }   
                    else
                    {           
                        MidiDebugImporting = 0    
                        MidiDebugImported = 1
                    }
                }   
            }  
        }
        else
        {
            if(!MidiDebugDone)
            {
                fileRead():decodeMidi(120)  
            
                MidiDebugDone = parsingDone()
            } 
                  
            if(changed(MidiDebugDone) & MidiDebugDone)
            {    
                MidiDebugImporting = 0
                MidiDebugImported  = 0
              
                printTable(MidiResult)    
           #     print(MidiResult["tracks", table]:count())
                
                runOnFile(0)
                runOnTick(0)
            }
        }        
    }
    
    midiLibReset()  
}

#midiLibDebug(">e2shared/midiparser/10yard.txt")
